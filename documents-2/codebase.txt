Directory Structure:
langchain4j-spring/
  vite.config.ts
  src/
    main/
      resources/
        application.properties
      java/
        com/
          example/
            langchain/
              LangchainApplication.java
              config/
                ContentRetrieverConfig.java
                Assistant.java
                EmbeddingStoreIngestorConfig.java
                openai/
                  OpenAiStreamingChatModelConfig.java
                  OpenAiChatModelConfig.java
                  OpenAiEmbeddingModelConfig.java
                EmbeddingStoreConfig.java
                ollama/
                  OllamaStreamingChatModelConfig.java
                  OllamaChatModelConfig.java
                  OllamaEmbeddingModelConfig.java
                AiServicesConfig.java
              controllers/
                ChatController.java
              service/
                ChatService.java
                EmbeddingService.java
              extractor/
                Coach.java
                CoachExtractor.java
                CoachExtractorConfig.java
  pom.xml
  types.d.ts
  package.json
  tsconfig.json
  frontend/
    routes.tsx
    App.tsx
    themes/
      langchain4j-spring/
        theme.json
        styles.css
    index.ts
    views/
      streamassistant/
        StreamAssistantView.tsx
      ingestinfo/
        IngestDataView.tsx
      extractdata/
        ExtractDataView.tsx
      chat/
        ChatView.tsx
      streamchat/
        StreamChatView.tsx
      MainView.tsx
    index.html

File Contents:

--- /home/pkonstantellos/git/langchain4j-spring/vite.config.ts ---
import react from '@vitejs/plugin-react';
import type { UserConfigFn } from 'vite';
import { overrideVaadinConfig } from './vite.generated';

const customConfig: UserConfigFn = (env) => ({
  // Here you can add custom Vite parameters
  // https://vitejs.dev/config/
  plugins: [
    react({
      include: '**/*.tsx',
    }),
  ],
});

export default overrideVaadinConfig(customConfig);

--- /home/pkonstantellos/git/langchain4j-spring/src/main/resources/application.properties ---
spring.application.name=langchain
spring.profiles.active=dev
spring.threads.virtual.enabled=true
logging.level.dev.langchain4j=DEBUG
logging.level.dev.langchain4j.rag.DefaultRetrievalAugmentor=TRACE
# OLLAMA
ollama.base-url=http://localhost:11434/
ollama.model-name=mistral
ollama.embedding-model-name=nomic-embed-text
# OPENAI
openai.api-key=${OPENAI_API_KEY}
openai.model-name=gpt-3.5-turbo
openai.embedding-model-name=text-embedding-3-small
--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/LangchainApplication.java ---
package com.example.langchain;

import com.vaadin.flow.component.page.AppShellConfigurator;
import com.vaadin.flow.theme.Theme;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@Theme(value = "langchain4j-spring")
public class LangchainApplication implements AppShellConfigurator {

	public static void main(String[] args) {
		SpringApplication.run(LangchainApplication.class, args);
	}

}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/ContentRetrieverConfig.java ---
package com.example.langchain.config;

import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.rag.content.retriever.ContentRetriever;
import dev.langchain4j.rag.content.retriever.EmbeddingStoreContentRetriever;
import dev.langchain4j.store.embedding.EmbeddingStore;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ContentRetrieverConfig {

    @Bean
    ContentRetriever contentRetriever(EmbeddingStore<TextSegment> embeddingStore, EmbeddingModel embeddingModel) {
        return EmbeddingStoreContentRetriever.builder()
                .embeddingStore(embeddingStore)
                .embeddingModel(embeddingModel)
                .maxResults(3)
                .minScore(0.7)
                .build();
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/Assistant.java ---
package com.example.langchain.config;

import dev.langchain4j.service.SystemMessage;
import dev.langchain4j.service.TokenStream;


public interface Assistant {

    String chat(String message);
    @SystemMessage("""
            You are a professional chess coach.
            Your name will be given by the context.
            You are friendly, polite, precise and concise.
            Only when you are asked for chess advice,
            try to respond with examples from your own games.
            If you are not asked about chess advice, give short replies.
            """)
    TokenStream streamChat(String message);
}


--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/EmbeddingStoreIngestorConfig.java ---
package com.example.langchain.config;

import dev.langchain4j.data.document.DocumentSplitter;
import dev.langchain4j.data.document.splitter.DocumentSplitters;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class EmbeddingStoreIngestorConfig {

    @Bean
    EmbeddingStoreIngestor embeddingStoreIngestor(
            EmbeddingStore<TextSegment> embeddingStore,
            EmbeddingModel embeddingModel,
            DocumentSplitter splitter) {
        return EmbeddingStoreIngestor.builder()
                .embeddingModel(embeddingModel)
                .embeddingStore(embeddingStore)
                .documentSplitter(splitter)
                .build();
    }

    @Bean
    DocumentSplitter splitter() {
        return DocumentSplitters.recursive(500, 50);
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/openai/OpenAiStreamingChatModelConfig.java ---
package com.example.langchain.config.openai;

import dev.langchain4j.model.chat.StreamingChatLanguageModel;
import dev.langchain4j.model.openai.OpenAiStreamingChatModel;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Configuration
@Profile("prod")
public class OpenAiStreamingChatModelConfig {

    @Value("${openai.api-key}")
    private String apiKey;

    @Value("${openai.model-name}")
    private String modelName;

    @Bean
    public StreamingChatLanguageModel openAiStreamingChatModel() {
        return OpenAiStreamingChatModel.builder()
                .apiKey(apiKey)
                .modelName(modelName)
                .temperature(0.7)
                .logRequests(true)
                .logResponses(true)
                .build();
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/openai/OpenAiChatModelConfig.java ---
package com.example.langchain.config.openai;

import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.openai.OpenAiChatModel;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Configuration
@Profile("prod")
public class OpenAiChatModelConfig {

    @Value("${openai.api-key}")
    private String apiKey;

    @Value("${openai.model-name}")
    private String modelName;

    @Bean
    public ChatLanguageModel openAiChatModel() {
        return OpenAiChatModel.builder()
                .apiKey(apiKey)
                .modelName(modelName)
                .temperature(0.7)
                .responseFormat("json_object")
                .logRequests(true)
                .logResponses(true)
                .build();
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/openai/OpenAiEmbeddingModelConfig.java ---
package com.example.langchain.config.openai;

import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.model.openai.OpenAiEmbeddingModel;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Configuration
@Profile("prod")
public class OpenAiEmbeddingModelConfig {

    @Value("${openai.api-key}")
    private String apiKey;

    @Value("${openai.embedding-model-name}")
    private String embeddingModelName;

    @Bean
    public EmbeddingModel openAiEmbeddingModel() {
        return OpenAiEmbeddingModel.builder()
                .apiKey(apiKey)
                .modelName(embeddingModelName)
                .build();
    }

}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/EmbeddingStoreConfig.java ---
package com.example.langchain.config;

import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.store.embedding.EmbeddingStore;
import dev.langchain4j.store.embedding.inmemory.InMemoryEmbeddingStore;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class EmbeddingStoreConfig {

    @Bean
    EmbeddingStore<TextSegment> embeddingStore() {
        return new InMemoryEmbeddingStore<>();
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/ollama/OllamaStreamingChatModelConfig.java ---
package com.example.langchain.config.ollama;

import dev.langchain4j.model.chat.StreamingChatLanguageModel;
import dev.langchain4j.model.ollama.OllamaStreamingChatModel;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import java.time.Duration;

@Configuration
@Profile("dev")
public class OllamaStreamingChatModelConfig {

    @Value("${ollama.base-url}")
    private String baseURL;

    @Value("${ollama.model-name}")
    private String modelName;

    @Bean
    StreamingChatLanguageModel ollamaStreamingChatModel() {
        return OllamaStreamingChatModel.builder()
                .baseUrl(baseURL)
                .modelName(modelName)
                .temperature(0.7)
                .logRequests(true)
                .logResponses(true)
                .timeout(Duration.ofHours(1))
                .build();
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/ollama/OllamaChatModelConfig.java ---
package com.example.langchain.config.ollama;

import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.ollama.OllamaChatModel;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Configuration
@Profile("dev")
public class OllamaChatModelConfig {

    @Value("${ollama.base-url}")
    private String baseURL;

    @Value("${ollama.model-name}")
    private String modelName;

    @Bean
    ChatLanguageModel ollamaChatModel() {
        return OllamaChatModel.builder()
                .baseUrl(baseURL)
                .modelName(modelName)
                .temperature(0.7)
                .format("json")
                .logRequests(true)
                .logResponses(true)
                .build();
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/ollama/OllamaEmbeddingModelConfig.java ---
package com.example.langchain.config.ollama;

import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.model.ollama.OllamaEmbeddingModel;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

@Configuration
@Profile("dev")
public class OllamaEmbeddingModelConfig {

    @Value("${ollama.base-url}")
    private String baseURL;

    @Value("${ollama.embedding-model-name}")
    private String embeddingModelName;

    @Bean
    EmbeddingModel ollamaEmbeddingModel() {
        return OllamaEmbeddingModel.builder()
                .baseUrl(baseURL)
                .modelName(embeddingModelName)
                .build();
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/config/AiServicesConfig.java ---
package com.example.langchain.config;

import dev.langchain4j.memory.chat.MessageWindowChatMemory;
import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.chat.StreamingChatLanguageModel;
import dev.langchain4j.rag.content.retriever.ContentRetriever;
import dev.langchain4j.service.AiServices;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AiServicesConfig {

    @Bean
    public Assistant assistant(
            ChatLanguageModel chatLanguageModel,
            StreamingChatLanguageModel streamingChatLanguageModel,
            ContentRetriever contentRetriever
    ) {
        return AiServices.builder(Assistant.class)
                .chatLanguageModel(chatLanguageModel)
                .streamingChatLanguageModel(streamingChatLanguageModel)
                .chatMemory(MessageWindowChatMemory.withMaxMessages(5))
                .contentRetriever(contentRetriever)
                .build();
    }
}



--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/controllers/ChatController.java ---
package com.example.langchain.controllers;

import com.example.langchain.service.ChatService;
import com.example.langchain.service.EmbeddingService;
import com.vaadin.flow.server.auth.AnonymousAllowed;
import dev.hilla.Endpoint;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.store.embedding.EmbeddingMatch;
import dev.langchain4j.store.embedding.EmbeddingSearchResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Flux;
import java.net.MalformedURLException;

@RestController
@Endpoint
@AnonymousAllowed
public class ChatController {

    private final ChatService chatService;
    private final EmbeddingService embeddingService;

    public ChatController(ChatService chatService, EmbeddingService embeddingService) {
        this.chatService = chatService;
        this.embeddingService = embeddingService;
    }

    @GetMapping("/chat")
    public String chat(@RequestParam String prompt) {
        return chatService.chat(prompt);
    }

    @GetMapping(value = "/stream-chat", produces = "text/event-stream")
    public Flux<String> streamChat(@RequestParam String prompt) {
        return chatService.streamChat(prompt);
    }

    @GetMapping(value = "/stream-assistant", produces = "text/event-stream")
    public Flux<String> streamAssistant(@RequestParam String prompt) {
        return chatService.streamAssistant(prompt);
    }

    @PostMapping("/ingest-data")
    public String ingestInfo(@RequestParam String prompt) {
        try {
            embeddingService.ingestInfo(prompt);
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }

        return "Data ingested successfully";
    }

    @GetMapping("/extract-data")
    public String extractData(String prompt) {

        // The name of the coach we want to extract the info
        EmbeddingSearchResult<TextSegment> context = embeddingService.retrieveInfo(prompt);
        // Retrieval is set up to  give at most 3 results.
        // We aggregate them and use them all as context.
        StringBuilder sb = new StringBuilder();
        for (EmbeddingMatch<TextSegment> match : context.matches()) {
            sb.append(match.embedded().text()).append("\n");
        }

        return chatService.extractCoach(sb.toString());
    }

}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/service/ChatService.java ---
package com.example.langchain.service;

import com.example.langchain.config.Assistant;
import com.example.langchain.extractor.Coach;
import com.example.langchain.extractor.CoachExtractor;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import dev.langchain4j.data.message.AiMessage;
import dev.langchain4j.model.StreamingResponseHandler;
import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.model.chat.StreamingChatLanguageModel;
import dev.langchain4j.service.AiServices;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Sinks;

@Service
public class ChatService {

    private final ChatLanguageModel chatLanguageModel;
    private final StreamingChatLanguageModel streamingChatLanguageModel;
    private final Assistant assistant;
    private final CoachExtractor coachEctractor;
    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();

    public ChatService(ChatLanguageModel chatLanguageModel, StreamingChatLanguageModel streamingChatLanguageModel, Assistant assistant, CoachExtractor coachEctractor) {
        this.chatLanguageModel = chatLanguageModel;
        this.streamingChatLanguageModel = streamingChatLanguageModel;
        this.assistant = assistant;
        this.coachEctractor = coachEctractor;
    }

    public String chat(String prompt) {
        return chatLanguageModel.generate(prompt);
    }

    public Flux<String> streamChat(String prompt) {
        Sinks.Many<String> sink = Sinks.many().unicast().onBackpressureBuffer();

        streamingChatLanguageModel.generate(prompt, new StreamingResponseHandler<AiMessage>() {
            @Override
            public void onNext(String token) {
                sink.tryEmitNext(token);
            }

            @Override
            public void onError(Throwable error) {
                sink.tryEmitError(error);
            }
        });

        return sink.asFlux();
    }

    public Flux<String> streamAssistant(String prompt) {
        Sinks.Many<String> sink = Sinks.many().unicast().onBackpressureBuffer();

        assistant.streamChat(prompt)
                .onNext(sink::tryEmitNext)
                .onComplete(c -> sink.tryEmitComplete())
                .onError(sink::tryEmitError)
                .start();

        return sink.asFlux();
    }

    public String extractCoach(String context) {
        return gson.toJson(coachEctractor.extract(context));
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/service/EmbeddingService.java ---
package com.example.langchain.service;

import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.data.document.Document;
import dev.langchain4j.data.document.loader.UrlDocumentLoader;
import dev.langchain4j.data.document.parser.TextDocumentParser;
import dev.langchain4j.data.document.transformer.HtmlTextExtractor;
import dev.langchain4j.data.segment.TextSegment;
import dev.langchain4j.store.embedding.*;
import org.springframework.stereotype.Service;

import java.net.MalformedURLException;
import java.net.URL;

import static org.springframework.util.ResourceUtils.toURL;


@Service
public class EmbeddingService {

    private final EmbeddingStoreIngestor embeddingStoreIngestor;
    private final EmbeddingStore<TextSegment> embeddingStore;
    private final EmbeddingModel embeddingModel;

    public EmbeddingService(
            EmbeddingStoreIngestor embeddingStoreIngestor,
            EmbeddingStore<TextSegment> embeddingStore,
            EmbeddingModel embeddingModel) {
        this.embeddingStoreIngestor = embeddingStoreIngestor;
        this.embeddingStore = embeddingStore;
        this.embeddingModel = embeddingModel;
    }

    public void ingestInfo(String prompt) throws MalformedURLException {
        // Load the HTML document from the URL
        URL url = toURL(prompt);
        Document htmlDocument = UrlDocumentLoader.load(url, new TextDocumentParser());
        // Only get the paragraphs from the HTML document
        HtmlTextExtractor htmlTextExtractor = new HtmlTextExtractor("p", null, true);
        Document document = htmlTextExtractor.transform(htmlDocument);

        embeddingStoreIngestor.ingest(document);
    }

    public EmbeddingSearchResult<TextSegment> retrieveInfo(String prompt) {

        String query = "You are %s. What is your full name, nickname, nationality, birthdate and official peak rating?".formatted(prompt);
        EmbeddingSearchRequest embeddingSearchRequest = EmbeddingSearchRequest.builder()
                .queryEmbedding(embeddingModel.embed(query).content())
                .maxResults(3)
                .minScore(0.7)
                .build();

        return embeddingStore.search(embeddingSearchRequest);
    }
}
--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/extractor/Coach.java ---
package com.example.langchain.extractor;

public record Coach(
        String fullName,
        String nickname,
        String nationality,
        String born,
        String peakRating
){}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/extractor/CoachExtractor.java ---
package com.example.langchain.extractor;

import dev.langchain4j.service.UserMessage;

public interface CoachExtractor {

    @UserMessage("""
             Extract the info for the Coach described below.
             Return strictly only JSON, without any markdown markup surrounding it.
             Here is the document describing the Coach:
             ---
             {{it}}
            """)
    Coach extract(String context);
}

--- /home/pkonstantellos/git/langchain4j-spring/src/main/java/com/example/langchain/extractor/CoachExtractorConfig.java ---
package com.example.langchain.extractor;

import dev.langchain4j.model.chat.ChatLanguageModel;
import dev.langchain4j.service.AiServices;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class CoachExtractorConfig {

    @Bean
    CoachExtractor coachExtractor(ChatLanguageModel chatLanguageModel) {
        return AiServices.create(CoachExtractor.class, chatLanguageModel);
    }
}

--- /home/pkonstantellos/git/langchain4j-spring/pom.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>langchain</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>langchain</name>
	<description>langchain</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
		<langchain4j.version>0.31.0</langchain4j.version>
		<hilla.version>2.5.7</hilla.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>dev.langchain4j</groupId>
				<artifactId>langchain4j-bom</artifactId>
				<version>${langchain4j.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>dev.hilla</groupId>
				<artifactId>hilla-bom</artifactId>
				<version>${hilla.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webflux</artifactId>
		</dependency>
		<dependency>
			<groupId>dev.hilla</groupId>
			<artifactId>hilla-react</artifactId>
		</dependency>
		<dependency>
			<groupId>dev.hilla</groupId>
			<artifactId>hilla-spring-boot-starter</artifactId>
		</dependency>

		<!-- LangChain4j dependencies -->
		<dependency>
			<groupId>dev.langchain4j</groupId>
			<artifactId>langchain4j</artifactId>
		</dependency>
		<dependency>
			<groupId>dev.langchain4j</groupId>
			<artifactId>langchain4j-ollama</artifactId>
		</dependency>
		<dependency>
			<groupId>dev.langchain4j</groupId>
			<artifactId>langchain4j-open-ai</artifactId>
		</dependency>
		<dependency>
			<groupId>dev.langchain4j</groupId>
			<artifactId>langchain4j-embeddings</artifactId>
			<version>0.31.0</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>dev.hilla</groupId>
				<artifactId>hilla-maven-plugin</artifactId>
				<version>2.4.0</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-frontend</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>

--- /home/pkonstantellos/git/langchain4j-spring/types.d.ts ---
declare module '*.module.css' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.sass' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.scss' {
  declare const styles: Record<string, string>;
  export default styles;
}
declare module '*.module.less' {
  declare const classes: Record<string, string>;
  export default classes;
}
declare module '*.module.styl' {
  declare const classes: Record<string, string>;
  export default classes;
}

/* CSS FILES */
declare module '*.css';
declare module '*.sass';
declare module '*.scss';
declare module '*.less';
declare module '*.styl';

/* IMAGES */
declare module '*.svg' {
  const ref: string;
  export default ref;
}
declare module '*.bmp' {
  const ref: string;
  export default ref;
}
declare module '*.gif' {
  const ref: string;
  export default ref;
}
declare module '*.jpg' {
  const ref: string;
  export default ref;
}
declare module '*.jpeg' {
  const ref: string;
  export default ref;
}
declare module '*.png' {
  const ref: string;
  export default ref;
}
declare module '*.avif' {
  const ref: string;
  export default ref;
}
declare module '*.webp' {
  const ref: string;
  export default ref;
}

--- /home/pkonstantellos/git/langchain4j-spring/package.json ---
{
  "name": "no-name",
  "license": "UNLICENSED",
  "type": "module",
  "dependencies": {
    "@hilla/form": "2.5.7",
    "@hilla/frontend": "2.5.7",
    "@hilla/generator-typescript-cli": "2.5.7",
    "@hilla/generator-typescript-core": "2.5.7",
    "@hilla/generator-typescript-plugin-backbone": "2.5.7",
    "@hilla/generator-typescript-plugin-barrel": "2.5.7",
    "@hilla/generator-typescript-plugin-client": "2.5.7",
    "@hilla/generator-typescript-plugin-model": "2.5.7",
    "@hilla/generator-typescript-plugin-push": "2.5.7",
    "@hilla/generator-typescript-plugin-subtypes": "2.5.7",
    "@hilla/generator-typescript-utils": "2.5.7",
    "@hilla/react-auth": "2.5.7",
    "@hilla/react-components": "2.3.0",
    "@hilla/react-crud": "2.5.7",
    "@hilla/react-form": "2.5.7",
    "@polymer/polymer": "3.5.1",
    "@vaadin-component-factory/vcf-nav": "1.1.0",
    "@vaadin/bundles": "24.3.0",
    "@vaadin/common-frontend": "0.0.19",
    "@vaadin/router": "1.7.5",
    "classnames": "^2.3.2",
    "construct-style-sheets-polyfill": "3.1.0",
    "lit": "3.1.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.4.2"
  },
  "devDependencies": {
    "@lit-labs/react": "^1.1.0",
    "@rollup/plugin-replace": "5.0.5",
    "@rollup/pluginutils": "5.1.0",
    "@types/react": "^18.0.25",
    "@types/react-dom": "^18.0.8",
    "@vitejs/plugin-react": "4.2.1",
    "@vitejs/plugin-react-swc": "3.5.0",
    "async": "3.2.4",
    "glob": "10.3.3",
    "rollup-plugin-brotli": "3.1.0",
    "rollup-plugin-visualizer": "5.12.0",
    "strip-css-comments": "5.0.0",
    "transform-ast": "2.4.4",
    "typescript": "5.3.3",
    "vite": "5.1.1",
    "vite-plugin-checker": "0.6.4",
    "workbox-build": "7.0.0",
    "workbox-core": "7.0.0",
    "workbox-precaching": "7.0.0"
  },
  "overrides": {
    "@vaadin/bundles": "$@vaadin/bundles",
    "@vaadin/router": "$@vaadin/router",
    "@vaadin/common-frontend": "$@vaadin/common-frontend",
    "construct-style-sheets-polyfill": "$construct-style-sheets-polyfill",
    "lit": "$lit",
    "@polymer/polymer": "$@polymer/polymer",
    "@hilla/react-components": "$@hilla/react-components",
    "@vaadin-component-factory/vcf-nav": "$@vaadin-component-factory/vcf-nav",
    "classnames": "$classnames",
    "react": "$react",
    "react-dom": "$react-dom",
    "react-router-dom": "$react-router-dom",
    "@hilla/generator-typescript-plugin-model": "$@hilla/generator-typescript-plugin-model",
    "@hilla/generator-typescript-plugin-barrel": "$@hilla/generator-typescript-plugin-barrel",
    "@hilla/generator-typescript-plugin-push": "$@hilla/generator-typescript-plugin-push",
    "@hilla/generator-typescript-core": "$@hilla/generator-typescript-core",
    "@hilla/generator-typescript-plugin-client": "$@hilla/generator-typescript-plugin-client",
    "@hilla/generator-typescript-utils": "$@hilla/generator-typescript-utils",
    "@hilla/frontend": "$@hilla/frontend",
    "@hilla/form": "$@hilla/form",
    "@hilla/generator-typescript-plugin-backbone": "$@hilla/generator-typescript-plugin-backbone",
    "@hilla/generator-typescript-cli": "$@hilla/generator-typescript-cli",
    "@hilla/react-auth": "$@hilla/react-auth",
    "@hilla/react-form": "$@hilla/react-form",
    "@hilla/generator-typescript-plugin-subtypes": "$@hilla/generator-typescript-plugin-subtypes",
    "@hilla/react-crud": "$@hilla/react-crud"
  },
  "vaadin": {
    "dependencies": {
      "@hilla/form": "2.5.7",
      "@hilla/frontend": "2.5.7",
      "@hilla/generator-typescript-cli": "2.5.7",
      "@hilla/generator-typescript-core": "2.5.7",
      "@hilla/generator-typescript-plugin-backbone": "2.5.7",
      "@hilla/generator-typescript-plugin-barrel": "2.5.7",
      "@hilla/generator-typescript-plugin-client": "2.5.7",
      "@hilla/generator-typescript-plugin-model": "2.5.7",
      "@hilla/generator-typescript-plugin-push": "2.5.7",
      "@hilla/generator-typescript-plugin-subtypes": "2.5.7",
      "@hilla/generator-typescript-utils": "2.5.7",
      "@hilla/react-auth": "2.5.7",
      "@hilla/react-components": "2.3.0",
      "@hilla/react-crud": "2.5.7",
      "@hilla/react-form": "2.5.7",
      "@polymer/polymer": "3.5.1",
      "@vaadin/bundles": "24.3.0",
      "@vaadin/common-frontend": "0.0.19",
      "@vaadin/router": "1.7.5",
      "construct-style-sheets-polyfill": "3.1.0",
      "lit": "3.1.2"
    },
    "devDependencies": {
      "@rollup/plugin-replace": "5.0.5",
      "@rollup/pluginutils": "5.1.0",
      "@vitejs/plugin-react": "4.2.1",
      "@vitejs/plugin-react-swc": "3.5.0",
      "async": "3.2.4",
      "glob": "10.3.3",
      "rollup-plugin-brotli": "3.1.0",
      "rollup-plugin-visualizer": "5.12.0",
      "strip-css-comments": "5.0.0",
      "transform-ast": "2.4.4",
      "typescript": "5.3.3",
      "vite": "5.1.1",
      "vite-plugin-checker": "0.6.4",
      "workbox-build": "7.0.0",
      "workbox-core": "7.0.0",
      "workbox-precaching": "7.0.0"
    },
    "hash": "32b76ab250f315a701daa9a173e65ae2abbc925cafb4544c45f0f0aa05b2b7dc"
  }
}

--- /home/pkonstantellos/git/langchain4j-spring/tsconfig.json ---
// This TypeScript configuration file is generated by vaadin-maven-plugin.
// This is needed for TypeScript compiler to compile your TypeScript code in the project.
// It is recommended to commit this file to the VCS.
// You might want to change the configurations to fit your preferences
// For more information about the configurations, please refer to http://www.typescriptlang.org/docs/handbook/tsconfig-json.html
{
  "_version": "9",
  "compilerOptions": {
    "sourceMap": true,
    "jsx": "react-jsx",
    "inlineSources": true,
    "module": "esNext",
    "target": "es2020",
    "moduleResolution": "bundler",
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitReturns": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "baseUrl": "frontend",
    "paths": {
      "@vaadin/flow-frontend": ["generated/jar-resources"],
      "@vaadin/flow-frontend/*": ["generated/jar-resources/*"],
      "Frontend/*": ["*"]
    }
  },
  "include": [
    "frontend/**/*",
    "types.d.ts"
  ],
  "exclude": [
    "frontend/generated/jar-resources/**"
  ]
}

--- /home/pkonstantellos/git/langchain4j-spring/frontend/routes.tsx ---
import MainView from "Frontend/views/MainView.js";
import {
    createBrowserRouter,
    RouteObject
} from "react-router-dom";
import ChatView from "Frontend/views/chat/ChatView";
import StreamChatView from "Frontend/views/streamchat/StreamChatView";
import StreamAssistantView from "Frontend/views/streamassistant/StreamAssistantView";
import IngestDataView from "Frontend/views/ingestinfo/IngestDataView";
import ExtractDataView from "Frontend/views/extractdata/ExtractDataView";

export const routes: readonly RouteObject[] = [
    {
        path: "/",
        element: <MainView />,
        children: [
            { path: '/chat', element: <ChatView /> },
            { path: '/stream-chat', element: <StreamChatView /> },
            { path: '/stream-assistant', element: <StreamAssistantView /> },
            { path: '/ingest-data', element: <IngestDataView /> },
            { path: '/extract-data', element: <ExtractDataView /> },
        ],
    },
];

export const router = createBrowserRouter([...routes], {basename: new URL(document.baseURI).pathname });

--- /home/pkonstantellos/git/langchain4j-spring/frontend/App.tsx ---
import { router } from "Frontend/routes.js";
import { RouterProvider } from "react-router-dom";

export default function App() {
  return <RouterProvider router={router} />;
}

--- /home/pkonstantellos/git/langchain4j-spring/frontend/themes/langchain4j-spring/theme.json ---
{
  "lumoImports" : [ "typography", "color", "spacing", "badge", "utility" ]
}
--- /home/pkonstantellos/git/langchain4j-spring/frontend/themes/langchain4j-spring/styles.css ---
/* Import your application global css files here or add the styles directly to this file */
--- /home/pkonstantellos/git/langchain4j-spring/frontend/index.ts ---
import { createElement } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.js";

createRoot(document.getElementById("outlet")!).render(createElement(App));

--- /home/pkonstantellos/git/langchain4j-spring/frontend/views/streamassistant/StreamAssistantView.tsx ---
import {useState} from "react";
import {MessageList, MessageListItem} from "@hilla/react-components/MessageList";
import {ChatController} from "Frontend/generated/endpoints";
import {MessageInput} from "@hilla/react-components/MessageInput";

export default function StreamingChatView() {
    const [messages, setMessages] = useState<MessageListItem[]>([]);

    function addMessage(message: MessageListItem) {
        setMessages(messages => [...messages, message]);
    }

    function appendToLastMessage(chunk: string) {
        setMessages(messages => {
            const lastMessage = messages[messages.length - 1];
            lastMessage.text += chunk;
            return [...messages.slice(0, -1), lastMessage];
        });
    }

    async function sendMessage(message: string) {
        addMessage({
            text: message,
            userName: 'You'
        });

        let first = true;
        ChatController.streamAssistant(message).onNext(chunk => {
            if (first && chunk) {
                addMessage({
                    text: chunk,
                    userName: 'Assistant'
                });

                first = false;
            } else {
                if (chunk != null) {
                    appendToLastMessage(chunk);
                }
            }
        });
    }

    return (
        <div className="p-m flex flex-col h-full box-border">
            <MessageList items={messages} className="flex-grow"/>
            <MessageInput onSubmit={e => sendMessage(e.detail.value)}/>
        </div>
    );
}

--- /home/pkonstantellos/git/langchain4j-spring/frontend/views/ingestinfo/IngestDataView.tsx ---
import { ChatController } from "Frontend/generated/endpoints";
import { MessageInput } from "@hilla/react-components/MessageInput";
import { Notification } from "@hilla/react-components/Notification";
import {MessageList} from "@hilla/react-components/MessageList";

export default function IngestDataView() {

    async function sendMessage(message: string) {
        try {
            await ChatController.ingestInfo(message);
            Notification.show("Data ingested successfully!", { position: "middle", duration: 3000 });
        } catch (error) {
            Notification.show("Failed to ingest data.", { position: "middle", duration: 3000 });
        }
    }

    return (
        <div className="p-m flex flex-col h-full box-border">
            <MessageList className="flex-grow"/>
            <MessageInput
                onSubmit={e => sendMessage(e.detail.value)}
            />
        </div>
    );
}
--- /home/pkonstantellos/git/langchain4j-spring/frontend/views/extractdata/ExtractDataView.tsx ---
import {useState} from "react";
import {MessageList, MessageListItem} from "@hilla/react-components/MessageList";
import {MessageInput} from "@hilla/react-components/MessageInput";
import {ChatController} from "Frontend/generated/endpoints";

export default function ExtractDataView() {
    const [messages, setMessages] = useState<MessageListItem[]>([]);

    async function sendMessage(message: string) {
        setMessages(messages => [...messages, {
            text: message,
            userName: 'You'
        }]);

        const response = await ChatController.extractData(message);
        setMessages(messages => [...messages, {
            text: response,
            userName: 'Assistant'
        }]);
    }

    return (
        <div className="p-m flex flex-col h-full box-border">
            <MessageList items={messages} className="flex-grow"/>
            <MessageInput onSubmit={e => sendMessage(e.detail.value)}/>
        </div>
    );
}

--- /home/pkonstantellos/git/langchain4j-spring/frontend/views/chat/ChatView.tsx ---
import {useState} from "react";
import {MessageList, MessageListItem} from "@hilla/react-components/MessageList";
import {MessageInput} from "@hilla/react-components/MessageInput";
import {ChatController} from "Frontend/generated/endpoints";

export default function ChatView() {
    const [messages, setMessages] = useState<MessageListItem[]>([]);

    async function sendMessage(message: string) {
        setMessages(messages => [...messages, {
            text: message,
            userName: 'You'
        }]);

        const response = await ChatController.chat(message);
        setMessages(messages => [...messages, {
            text: response,
            userName: 'Assistant'
        }]);
    }

    return (
        <div className="p-m flex flex-col h-full box-border">
            <MessageList items={messages} className="flex-grow"/>
            <MessageInput onSubmit={e => sendMessage(e.detail.value)}/>
        </div>
    );
}

--- /home/pkonstantellos/git/langchain4j-spring/frontend/views/streamchat/StreamChatView.tsx ---
import {useState} from "react";
import {MessageList, MessageListItem} from "@hilla/react-components/MessageList";
import {ChatController} from "Frontend/generated/endpoints";
import {MessageInput} from "@hilla/react-components/MessageInput";

export default function StreamingChatView() {
    const [messages, setMessages] = useState<MessageListItem[]>([]);

    function addMessage(message: MessageListItem) {
        setMessages(messages => [...messages, message]);
    }

    function appendToLastMessage(chunk: string) {
        setMessages(messages => {
            const lastMessage = messages[messages.length - 1];
            lastMessage.text += chunk;
            return [...messages.slice(0, -1), lastMessage];
        });
    }

    async function sendMessage(message: string) {
        addMessage({
            text: message,
            userName: 'You'
        });

        let first = true;
        ChatController.streamChat(message).onNext(chunk => {
            if (first && chunk) {
                addMessage({
                    text: chunk,
                    userName: 'Assistant'
                });

                first = false;
            } else {
                if (chunk != null) {
                    appendToLastMessage(chunk);
                }
            }
        });
    }

    return (
        <div className="p-m flex flex-col h-full box-border">
            <MessageList items={messages} className="flex-grow"/>
            <MessageInput onSubmit={e => sendMessage(e.detail.value)}/>
        </div>
    );
}

--- /home/pkonstantellos/git/langchain4j-spring/frontend/views/MainView.tsx ---
import {AppLayout} from "@hilla/react-components/AppLayout";
import {Link, NavLink, Outlet} from "react-router-dom";
import {Suspense} from "react";
import {DrawerToggle} from "@hilla/react-components/DrawerToggle";

const navLinkClasses = ({ isActive }: any) => {
    return `block rounded-m p-s ${isActive ? 'bg-primary-10 text-primary' : 'text-body'}`;
};

export default function MainView() {
    return (
        <AppLayout primarySection="drawer">
            <div slot="drawer" className="flex flex-col justify-between h-full p-m">
                <header className="flex flex-col gap-m">
                   <Link to={"/"}><h1 className="text-l m-0">LangChain4J/Spring Demo</h1></Link>
                    <nav>
                        <NavLink className={navLinkClasses} to="/chat">
                            Chat
                        </NavLink>
                        <NavLink className={navLinkClasses} to="/stream-chat">
                            Stream Chat
                        </NavLink>
                        <NavLink className={navLinkClasses} to="/stream-assistant">
                            Stream Assistant
                        </NavLink>
                        <NavLink className={navLinkClasses} to="/ingest-data">
                            Ingest Data
                        </NavLink>
                        <NavLink className={navLinkClasses} to="/extract-data">
                            Extract Data
                        </NavLink>
                    </nav>
                </header>
            </div>

            <DrawerToggle slot="navbar" aria-label="Menu toggle"></DrawerToggle>

            <Suspense>
                <Outlet />
            </Suspense>
        </AppLayout>
    );
}

--- /home/pkonstantellos/git/langchain4j-spring/frontend/index.html ---
<!DOCTYPE html>
<!--
This file is auto-generated by Vaadin.
-->

<html>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body, #outlet {
      height: 100vh;
      width: 100%;
      margin: 0;
    }
  </style>
  <!-- index.ts is included here automatically (either by the dev server or during the build) -->
</head>
<body>
  <!-- This outlet div is where the views are rendered -->
  <div id="outlet"></div>
</body>
</html>
